/**
 * QTI Assessment Editor - Architecture and Development Guidelines
 * 
 */

// Core Development Rules
const developmentRules = {
  rootDirectory: "qti-aipi",
  buildConstraints: "All development must occur within qti-aipi folder",
  primaryObjective: "Build a QTI 3.0 compliant assessment editor",
  secondaryObjective: "Ensure strict adherence to QTI 3.0 specification and API compliance",
};

// Application Architecture
const architecture = {
  frontend: {
    framework: "Next.js",
    baseComponents: {
      location: "src/components",
      examples: [
        "AssessmentItem.tsx", // Base component for QTI items
        "ItemBody.tsx" // Handles item content and interactions
      ]
    },
    typeDefinitions: {
      location: "src/types",
      coreTypes: [
        "assessment-item.ts",
        "assessment-test.ts",
        "item-body.ts",
        "qti-types.ts"
      ]
    }
  },
  
  api: {
    baseUrl: "http://localhost:3000/api",
    architecture: "Hexagonal (Ports & Adapters)",
    
    domain: {
      coreEntities: [
        "AssessmentItem",
        "AssessmentTest",
        "Section",
        "Curriculum"
      ],
      valueObjects: [
        "QTIMetadata",
        "TestPart",
        "ItemBody"
      ]
    },
    
    ports: {
      primary: [
        "AssessmentItemPort",
        "AssessmentTestPort",
        "SectionPort",
        "CurriculumPort"
      ],
      secondary: [
        "QtiRepository",
        "QtiXmlParser",
        "QtiXmlConverter"
      ]
    },
    
    endpoints: {
      assessmentItems: {
        base: "/assessment-items",
        operations: [
          "POST / - Create from QTI XML",
          "GET / - Search items",
          "GET /:identifier - Get by ID",
          "PUT /:identifier - Update",
          "DELETE /:identifier - Delete"
        ]
      },
      assessmentTests: {
        base: "/assessment-tests",
        operations: [/* similar CRUD operations */]
      },
      sections: {
        base: "/sections",
        operations: [/* section-specific operations */]
      },
      curriculum: {
        base: "/curriculum",
        operations: [/* curriculum-specific operations */]
      }
    }
  }
};

// Development Guidelines
const guidelines = {
  componentDevelopment: {
    location: "src/components",
    rules: [
      "Use TypeScript for all components",
      "Follow QTI 3.0 specification strictly",
      "Implement proper type checking",
      "Include JSDoc documentation"
    ]
  },
  
  typeDefinitions: {
    location: "src/types",
    rules: [
      "Define interfaces for all QTI elements",
      "Use strict typing",
      "Include QTI spec references in comments"
    ]
  },
  
  apiIntegration: {
    rules: [
      "Use provided API endpoints",
      "Handle XML parsing/generation",
      "Implement proper error handling",
      "Follow RESTful practices"
    ]
  }
};

// Architectural Constraints
const constraints = {
  qtiCompliance: "Strict adherence to QTI 3.0 specification",
  xmlValidation: "All generated XML must validate against QTI 3.0 schemas",
  componentStructure: "Follow QTI 3.0 element hierarchy and relationships",
  typeSystem: "Use provided type definitions matching QTI 3.0 spec",
  stateManagement: "Use React hooks and context",
  dataFlow: "Follow unidirectional data flow"
};

/**
 * Instructions for LLMs:
 * 1. Ensure strict compliance with QTI 3.0 specification
 * 2. Validate all XML output against QTI 3.0 schemas
 * 3. Use existing type definitions from src/types
 * 4. Follow QTI 3.0 component patterns and hierarchy
 * 5. Integrate with API using provided endpoints
 * 6. Document code with JSDoc comments including QTI spec references
 * 7. Include type safety checks
 * 8. Follow hexagonal architecture patterns
 */ 