# Next.js Question & Test Interoperability Integration System Requirements

## Summary

The objective is to build a fully functional, deployable Next.js application integrated with the Question & Test Interoperability API. **All responses must adhere to the following requirements**, including the generation of a complete `package.json` file as the first item in every response. Every code snippet must comply with the provided patterns, file setups, and project structure.

---

## CRITICAL REQUIREMENTS

- **`package.json` file:**
  - MUST be included first in EVERY response.
  - MUST use specific versions for core dependencies (React, Next.js) as shown in the example below.
  - Use `"latest"` only for utility packages that do not have direct React version dependencies.
  - The app MUST build and run with the following commands:
    ```bash
    npm install && npm run build && npm run start
    ```
  - CRITICAL: endpoints: MUST reference qti-api.yaml
  - Always rely on the API server for error handling. Do not generate custom error codes; instead, accept and process the error responses as returned by the API.
  - When updating the app, always check the entire codebase.

---

## AI ASSISTANT RULES

1. You MUST read and follow ALL patterns and examples provided in this document.
2. You MUST NOT create your own patterns or "improve" existing ones.
3. Validate each code block against the patterns shown in this document.
4. Validate data schemas with their qti-api.yaml file.
5. EVERY response MUST start by checking compliance with these rules.
6. If a pattern exists in these rules, you MUST use it verbatim.

---

## Environment and Framework Requirements

- **Framework:** Next.js (v13+) with React 18.x.
- **Environment:** Node.js v20 is assumed.

---

## Project Structure

### Required Files

The project MUST include the following files and adhere to their defined structure:

1. **`package.json`:**

   ```json
   {
     "name": "qti-nextjs-app",
     "version": "0.1.0",
     "private": true,
     "scripts": {
       "dev": "next dev",
       "build": "next build",
       "start": "next start",
       "lint": "next lint"
     },
     "dependencies": {

       "next": "13.4.19",
       "react": "18.2.0",
       "react-dom": "18.2.0",
       "typescript": "5.0.4",
       "tailwindcss": "3.3.0",
       "autoprefixer": "10.4.14",
       "postcss": "8.4.21",
       "axios": "1.6.2"
     },
     "devDependencies": {
       "eslint": "8.27.0",
       "eslint-config-next": "13.4.19",
       "@types/axios": "0.14.0",
       "@types/node": "18.11.9",
       "@types/react": "18.0.25",
       "@types/react-dom": "18.0.9"

     }
   }
   ```

2. **API Base URL Configuration:**

   - Store in `.env`:
     ```bash
     NEXT_PUBLIC_QTI_BASE_URL=localhost:3000/api
     ```

3. **Proxy Handler for API Integration:**

   - File: `pages/api/proxy/[...path].ts`

     ```typescript
     import type { NextApiRequest, NextApiResponse } from "next";

     export default async function handler(
       req: NextApiRequest,
       res: NextApiResponse
     ) {
       const { path } = req.query;
       const apiPath = Array.isArray(path) ? path.join("/") : path;
       const baseUrl = process.env.NEXT_PUBLIC_QTI_BASE_URL;

       try {
         const response = await axios.get(`${baseUrl}/${apiPath}`);

         res.status(response.status).json(response.data);
       } catch (error) {
         res.status(500).json({ error: "Failed to fetch data" });
       }
     }
     ```

4. **API Client Implementation:**

   - File: `lib/api.ts`

     ```typescript
     const BASE_PATH = "/api/proxy";

     export async function fetchStudents() {
       const response = await axios.get(`${BASE_PATH}`);

       if (!response.ok) throw new Error("Failed to fetch students");
       return response.json();
     }
     ```

5. **TypeScript Requirements:**

   - ALL components, functions, and hooks MUST include explicit type definitions.
   - Example pattern:

     ```typescript
     interface Props {
       title: string;
       items: Item[];
     }

     export function Component({ title, items }: Props): JSX.Element {
       // ...
     }
     ```

6. **Component Usage Example:**

   - File: `components/QuestionList.tsx`

     ```typescript
     import { fetchQuestions } from "../lib/api";

     export default function QuestionList() {
       const { data, error } = fetchQuestions();
       // ... rest of the component
     }
     ```

---

## API Integration and Proxy Requirements

### Proxy Setup

- Proxy MUST:
  - Be located in `pages/api/proxy/[...path].ts`.
  - Forward requests to the QTI API.
  - Ensure all client-side calls use the proxy.

---

## UI Libraries and Component Guidelines

- Use Tailwind CSS for styling and accessibility:

  ```json
  {
    "dependencies": {
      "tailwindcss": "3.3.0",
      "@headlessui/react": "1.7.17"
    }
  }
  ```

- Example Component:
  ```tsx
  export function DataTable({ items }: { items: Item[] }) {
    return (
      <div
        role="table"
        aria-label="Data Table"
        className="w-full divide-y divide-gray-200 rounded-lg shadow-sm"
      >
        <div role="rowgroup" className="bg-gray-50">
          {/* Header */}
        </div>
        <div role="rowgroup">
          {items.map((item) => (
            <div
              key={item.id}
              role="row"
              className="grid grid-cols-3 gap-4 px-4 py-3 hover:bg-gray-50 focus-within:bg-gray-50"
              tabIndex={0}
            >
              {/* Row Content */}
            </div>
          ))}
        </div>
      </div>
    );
  }
  ```

---

## Deployment Verification

- Validate functionality at `http://localhost:3000`.
- Ensure compatibility with standard npm commands:
  ```bash
  npm install && npm run build && npm run start
  ```

---
