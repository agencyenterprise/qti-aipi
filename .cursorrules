{
"project_root": "qti-aipi",
"architecture_description": {
"overview": "This project is a React-based Edulastic clone implementing QTI 3.0 specifications. It uses TypeScript, Redux for state management, and Tailwind CSS for styling.",
"key_directories": {
"src/": "Main source code directory containing React components, state management, and application logic",
"src/components/": "Reusable UI components including QTI interaction types",
"src/components/interactions/": "Implementation of QTI 3.0 interaction types (e.g., choice, text entry, match)",
"src/types/": "TypeScript type definitions for QTI 3.0 data structures",
"src/store/": "Redux store configuration and slices for state management",
"src/pages/": "Main application pages/routes",
"src/assets/": "Static assets like images and icons"
},
"core_concepts": {
"assessment_structure": {
"description": "Follows QTI 3.0 specification for assessment structure",
"components": [
"AssessmentTest - Top-level container for the entire assessment",
"TestPart - Grouping of assessment sections",
"AssessmentSection - Groups of related items",
"AssessmentItem - Individual questions/interactions"
]
},
"interaction_types": {
"description": "Implements QTI 3.0 interaction types",
"components": [
"Choice Interactions",
"Text Entry Interactions",
"Match Interactions",
"Order Interactions",
"Extended Text Interactions"
]
},
"state_management": {
"description": "Redux-based state management",
"slices": [
"assessmentsSlice - Manages assessment data and structure",
"questionBankSlice - Handles question repository",
"uiSlice - Manages UI state and interactions"
]
}
},
"development_guidelines": {
"code_organization": [
"Place new interaction types in src/components/interactions/",
"Define TypeScript interfaces in src/types/",
"Implement new features using Redux slices in src/store/slices/",
"Follow React functional component patterns with hooks"
],
"styling": [
"Use Tailwind CSS for component styling",
"Follow responsive design principles",
"Maintain consistent UI components"
],
"state_management": [
"Use Redux for global state",
"Implement proper action creators and reducers",
"Follow Redux Toolkit patterns"
]
},
"key_features": [
"Question authoring interface",
"Assessment creation and management",
"QTI 3.0 compliant interaction types",
"Response processing and scoring",
"Assessment preview and testing"
]
},
"recommended_tools": [
"TypeScript for type safety",
"Redux DevTools for state debugging",
"React Developer Tools",
"Vite for development server"
],
"file_patterns": {
"include": [
"src/**/*.{ts,tsx}",
"src/**/*.css"
],
"exclude": [
"node_modules",
"dist",
"build"
]
}
}
